"""
Django settings for test_project project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5(5!b#c7rm1um1owf2(y%g*e#2s97gn&)ek2#4-^7%vg1@-8h+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '13a8-102-156-205-94.ngrok.io',
    '127.0.0.1',
    'localhost',
]

CORS_ORIGIN_WHITELIST = [
     'http://localhost:3000'
]
CORS_ALLOWED_ORIGINS=[]
CORS_ORIGIN_ALLOW_ALL= True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS= True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'corsheaders',
    'rest_framework',
    'djoser',
    'social_django',
    'rest_framework_simplejwt',
    # 'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken', #voir  
    "debug_toolbar",
    'store',
    'core',
    'tags',
]

MIDDLEWARE = [  
    'social_django.middleware.SocialAuthExceptionMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

ROOT_URLCONF = 'test_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #'DIRS': [os.path.join(BASE_DIR)],
        #'DIRS': [os.path.join(BASE_DIR),os.path.join(BASE_DIR,'build')],
        'DIRS': [os.path.join(BASE_DIR,'build'),os.path.join(BASE_DIR)],

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect'
            ],
        },
    },
]
#for Gmail
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

WSGI_APPLICATION = 'test_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES={
   'default':{
      'ENGINE':'django.db.backends.postgresql_psycopg2',
      'NAME':'pfe_db',
      'USER':'postgres',
      'PASSWORD':'anaghim',
      'HOST':'localhost',
      'PORT':'5432',
   }
}

#EMAIL
#email account:bensouissimolka703@gmail.com
#app password:clxqarlnfhabqzqf
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'bensouissimolka703@gmail.com'
EMAIL_HOST_PASSWORD = 'clxqarlnfhabqzqf'
EMAIL_USE_TLS = True



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS =[
    os.path.join(BASE_DIR,'build/static')
]
STATIC_ROOT = os.path.join(BASE_DIR,'static')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
TEMPLATE_DIRS=(os.path.join(BASE_DIR, 'templates'),)

REST_FRAMEWORK = {
    #to said that the default auth system is JWT
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    #this is for pagination
    # this is for filtering
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}
#specifiy the prefix included in our headers: specify the prefix 'JWT' included in the request headers

AUTH_USER_MODEL = 'core.User'
# to add our custom serializer(we want to add some fields when registering a user to the built in seralizer of djoser)
DJOSER = {
    # we set these to have the possiblility to reset an email+pwd+acctivate an account+make the url we receive in the mails we receive 
    # to make djoser know that we're using email as a log in field(car par d√©faut :it's a username)
    'LOGIN_FIELD':'email',
    # to re-type the password
    'USER_CREATE_PASSWORD_RETYPE':True,
    # 'USERNAME_CHANGED_EMAIL_CONFIRMATION':True,
    # whenever the pwd changed i'll get a confirmation e-mail 
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION':True,
    #register or activation endpoint will send confirmation email to user
    'SEND_CONFIRMATION_EMAIL':True,
    # 'SET_USERNAME_RETYPE':True,
    # when you go set a new pwd we're going to have an additional field: re_new_password
    'SET_PASSWORD_RETYPE':True,
    #URL to your frontend password reset page to reset password confirmation endpoint
    'PASSWORD_RESET_CONFIRM_URL':'password/reset/confirm/{uid}/{token}',
    # 'USERNAME_RESET_CONFIRM_URL':'email/reset/confirm/{uid}/{token}',
    # when we activa our URL we're goint to have an e-mail with a lien when we click on
    'ACTIVATION_URL':'activate/{uid}/{token}',
    # to receive an acctivation e-mail
    'SEND_ACTIVATION_EMAIL':True,
    # #for Gmail+FB connection
    'SOCIAL_AUTH_TOKEN_STRATEGY': 'djoser.social.token.jwt.TokenStrategy',
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': ['http://localhost:8000/google', 'http://localhost:8000/facebook'],

    'SERIALIZERS':{
        'user_create':'core.serializers.UserCreateSerializer',
        'current_user':'core.serializers.UserSerializer',
        'user':'core.serializers.UserCreateSerializer',
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
    }
}
#pour augmanter le temps de validiter de acces token
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1)
}

#this is to log in /register with Gmail
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '839765700832-rbj754rhs7jnod812eebqm29urgoikpp.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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' 
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']
# log in /register with FB
SOCIAL_AUTH_FACEBOOK_KEY = '921010421904099'
SOCIAL_AUTH_FACEBOOK_SECRET = '5c3a0a441a91a90d78fd8abaa4b994af'
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'email, first_name, last_name'
}